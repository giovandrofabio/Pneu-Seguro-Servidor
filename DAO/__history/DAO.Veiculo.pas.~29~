unit DAO.Veiculo;

interface

uses FireDAC.Comp.Client,
     FireDAC.DApt,
     Data.DB,
     System.JSON,
     System.SysUtils,
     System.StrUtils,
     DataSet.Serialize,
     DAO.Connection,
     DAO.Empresa;

type
   TVeiculo = class
   private
      FConn: TFDConnection;
      FID_VEICULO: integer;
      FNOME_VEICULO: string;
      FEMPRESA: TEmpresa;
      procedure Validate(operacao: string);
   public
      constructor Create;
      destructor Destroy; override;

      property ID_VEICULO: integer Read FID_VEICULO write FID_VEICULO;
      property NOME_VEICULO: string read FNOME_VEICULO write FNOME_VEICULO;
      property EMPRESA: TEmpresa read FEMPRESA write FEMPRESA;

      function Listar(busca: string) : TJSONArray;
      procedure Adicionar;
   end;

implementation

{ TVeiculo }

procedure TVeiculo.Adicionar;
var
   qry: TFDQuery;
   json: TJSONObject;
begin
   Validate('Adicionar');

   try
      qry            := TFDQuery.Create(nil);
      qry.Connection := FConn;

      with qry do
      begin
         Active := False;
         SQL.Clear;
         SQL.Add('INSERT INTO TAB_VEICULO(ID_EMPRESA,NOME_VEICULO)');
         SQL.Add('VALUES(:ID_EMPRESA,:NOME_VEICULO);');
         SQL.Add('SELECT last_insert_rowid() AS ID_EMPRESA;');

         ParamByName('NOME_VEICULO').Value := NOME_VEICULO;
         ParamByName('ID_EMPRESA').Value   := EMPRESA.ID_EMPRESA;

         Active := True;

         ID_VEICULO := FieldByName('ID_VEICULO').AsInteger;
      end;

   finally
      qry.DisposeOf
   end;
end;

constructor TVeiculo.Create;
begin
   FConn    := TConnection.CreateConnection;
   FEMPRESA := TEmpresa.Create;
end;

destructor TVeiculo.Destroy;
begin
  if Assigned(FConn) then
     FConn.Free;

  if Assigned(FEMPRESA) then
     FEMPRESA.Free;

  inherited;
end;

function TVeiculo.Listar(busca: string): TJSONArray;
var
   qry: TFDQuery;
begin
   try
      qry            := TFDQuery.Create(nil);
      qry.Connection := FConn;

      with qry do
      begin
         Active := False;
         SQL.Clear;
         SQL.Add('SELECT TV.ID_VEICULO, TV.NOME_VEICULO, TE.NOME_EMPRESA, TU.NOME');
         SQL.Add('FROM TAB_VEICULO TV');
         SQL.Add('LEFT JOIN TAB_EMPRESA TE ON TE.ID_EMPRESA = TV.ID_EMPRESA');
         SQL.Add('LEFT JOIN TAB_EMPRESA TE ON TE.ID_EMPRESA = TV.ID_EMPRESA');

         if ID_VEICULO > 0 then
         begin
            SQL.Add('WHERE TV.ID_VEICULO = :ID_EMPRESA');
            ParamByName('TV.ID_VEICULO').Value := ID_VEICULO;
         end;

         if busca <> '' then
         begin
            SQL.Add('WHERE TV.ID_VEICULO = :ID_EMPRESA');
            ParamByName('TV.ID_VEICULO').Value := busca;
         end;

         SQL.Add('ORDER BY ID_VEICULO DESC');
         Active := True;
      end;

      Result := qry.ToJSONArray();
   finally
      qry.DisposeOf
   end;
end;

procedure TVeiculo.Validate(operacao: string);
begin
   if (EMPRESA.NOME_EMPRESA.IsEmpty) AND MatchStr(operacao,['Adicionar']) then
      raise Exception.Create('Nome empresa não informado');
end;


end.
